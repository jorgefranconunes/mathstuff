2012/10/05

Resumo:

1. 





LaTeX on Blogspot:

http://tex.stackexchange.com/questions/13865/how-to-use-latex-on-blogspot


Documentation on http://docs.mathjax.org/en/latest/start.html#mathjax-cdn


<script type="text/javascript"
  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">


Image with caption on Blogger:

<table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: right; margin-left: 1em; text-align: right;">
  <tbody>
    <tr><td style="text-align: center;">
      <img border="0"
          src="http://3.bp.blogspot.com/--NRPiL63bao/UG7ULPR1ENI/AAAAAAAAA60/LyX-w_9KQc4/s1600/xxx.png" />
    </td></tr>
    <tr><td class="tr-caption" style="text-align: center;">The Daubechies D4 wavlet.</td></tr>
  </tbody>
</table>






This is my first post. Its sole purpose is to check that it is indeed
possible to use mathematical formulas in Blogger posts.

\[
\phi(t) = \sum_k c_k \phi(2t-k)
\]

How about that? The stuff above is a wavelet scaling equation.

This is made possible by MathJax. To obtain the previous equation it
sufficed to include the following in the flow of the text:

\[
    \phi(t) = \sum_k \phi(2t-k)
\]


Now is also a good time to check 



Este é o primeiro texto. O objectivo é verificar que é efectivamente possível apresentar fórmulas matemáticas num blog do WordPress.



Que tal? Esta é a equação de escalamento que define uma wavelet.

Este resultado foi obtido usando uma funcionalidade do WordPress que permite incluir equações matemáticas no meio do texto. Para obter a equação acima foi inserido o pedaço de código em baixo durante a edição do texto:

$ latex \displaystyle \phi(t) = \sum_k \phi(2t-k) $

Em baixo é suposto estar uma imagem. Este é o gráfico da wavelet D4 de
Daubechies. Conseguimos pois colocar imagens arbitrárias neste
blog. Fixe.

E com isto terminamos o capítulo de hoje. Quanto ao próximo, depois se
verá qual o assunto a abordar.





2012/03/11

Resumo:

1. 





http://git-scm.com/course/svn.html


yum install git-svn


cat > .../authors.txt <<EOF
jfn = jorgefranconunes <jorgefranconunes@gmail.com>
EOF

git svn clone \
    --authors-file=.../authors.txt \
    --stdlayout \
    svn+ssh://ssh.pdmfc.com/home/jfn/svn/math mathstuff
cd ./mathstuff
git config user.name jorgefranconunes
git config user.email jorgefranconunes@gmail.com
git remote add origin git@github.com:jorgefranconunes/mathstuff.git
git push -u origin master





2010/12/31

Resumo:

1. 





IFS com SVG

Em vez de usar uma matriz de pixeis para representar a imagem, será
usada uma representação SVG.

Dado um objecto inicial (quadrado preenchido com 1 unidade de lado),
cada passo cria um novo objecto SVG resultante da união das
transformações do objecto inicial.

O número de iterações tem um limite definido pela resolução em pixels
da imagem. O número de iterações máximo necessário bastará que seja
tal que a imagem inicial seja reduzida para as dimensões de um pixel.

Seja s o maior factor de escala das transformações. Tem-se
necessariamente que s<1 (caso contrário não seria uma contração). Para
uma imagem quadrada com w pixeis de lado bastará que o número de
iterações não ultrapasse um valor n tal que s^n < 1/w.

O número de objectos SVG cresce exponencialmente. O número de objectos
em cada passo corresponde a memória ocupada. Quantos mais objectos,
mais memória ocupada. A quantidade de memória ocupada é relevante
tanto na ferramenta que calcula as iterações como na ferramente que
faz o rendering da imagem correspondente (Inkscape).


SVG info - 

http://www.w3.org/TR/SVG/
http://www.mecxpert.de/svg/fractals.html

defs - Elemento para definir um objecto que é usado/referenciado noutros
contextos.

use - Elemento para usar/instanciar um objecto anteriormente definido
com "defs". Pode receber o atributo "transform".

Atributo "transform" de "g" e "use".





2010/07/21

Resumo:

1. 011-StopMotionMovies - Iniciada a implementação da ferramenta para
a geração de videos stop-motion.





Para criar uma imagem intermédia entre duas, com pesos distintos:

composite -dissolve $PERCENTAGE input2.png input1.png output.png


Para criar a média de n imagens:

convert input1.png input2.png input3.png -average output.png





2010/07/20

Resumo:

1. 011-StopMotionMovies - Análise de ferramenta para geração de videos
stop-motion.





yum install xawtv
yum install fswebcam

fswebcam -r 640x480 -d v4l2:/dev/video0 --input 0 --frames 5 --skip 20 --no-banner --png 9 xxx.png



Exemplo de captura de frames e de geração de ficheiros de video:

index=0
while [ $index -lt 60 ] ; do
    name=$(printf "frame-%06d.png" $index)
    echo $name
    fswebcam -q -d v4l2:/dev/video0 --input 0 --frames 5 --skip 20 --no-banner --png 9 $name
    index=$(expr $index + 1)
done


ffmpeg -i frame-%06d.png -b 400000 movie.mpg





Objectivo: Criação de um video a partir de uma sequência de frames.

As frames foram adquiridas a intervalos de tempo não necessariamente
regulares. Cada frame tem associada uma timestamp, ou seja, é
conhecido o instante de tempo a que a frame é referente.

Designemos as frames obtidas directamente do dispositivo de aquisição
por frames originais.

Para gerar o video é necessária uma outra sequência de frames. A esta
sequência de frames usada como entrada directa para o video chamaremos
frames derivadas.

O conjunto das frames derivadas inclui as frames originais. Inclui
também, entre as frames originais outras frames obtidas de
interpolação entre as frames originais consecutivas.


Tomemos o tempo t de duração do video e dividamo-lo em fps * t slots,
em que "fps" é o número de frames por segundo para o formato de video
pretendido (tipicamente fps=25).

Para cada slot iremos criar uma frame derivada. No primeiro slot cai a
primeira frame original. No último slot cai a última frame original.

Para cada frame original: determinar o slot a que pertence e colocá-la
nesse slot.







Parâmetros de entrada:

Lista de frames originais.

Tempo de duração (segundos) pretendido para o video a ser criado.

Valor de fps para o video a ser criado (25, por omissão).

Directoria onde são criadas as frames derivadas.





Frame - file; time.

Movie

CalculatedFrame - inputFrameList ; index; time; outputFrame





2007/08/23

Resumo:

1. 





for f in *.ppm ; do pnmcrop $f | pnmtopng > $(basename $f .ppm).png ; done

for f in *.ppm ; do convert $f -filter Cubic -resize 192 -format png $(basename $f .ppm).png ; done
