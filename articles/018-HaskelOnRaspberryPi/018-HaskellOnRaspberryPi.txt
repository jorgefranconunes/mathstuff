= Haskell on Raspberry Pi 3
:author: Jorge Nunes
:email: jorgefranconunes@gmail.com
:revdate: 2017/04/23





== Abstract

Make LEDs blink with a Raspberry Pi 3 from within an Haskell program.





== Introduction

What is this document about?





== Installing Haskell development tools on Raspberry Pi 3

The instructions in this section apply to the
https://www.raspbian.org/[Raspbian] Linux distribution.

The Raspbian distribution is based on Debian. So to install the
Haskell development tools we just need to install the right
package. Like this:

----
sudo apt-get install haskell-platform
----

To quickly check the Haskell compiler has been successfully
installed:

----
jfn@raspberrypi:~ $ ghc --version
The Glorious Glasgow Haskell Compilation System, version 7.6.3
----

We're in business.





=== Haskell hello world

Just for kicks, let us write an hello world program
in Haskell. Begin with creating an Haskell source file named
`hello.hs`, and with the following contents:

[source,haskell]
----
main :: IO ()
main = do
  putStrLn "Hello, world!"
----

Now compile it into an executable:

----
jfn@raspberrypi:~$ ghc --make ./hello.hs
[1 of 1] Compiling Main             ( hello.hs, hello.o )
Linking hello ...
----

The above compilation command generated an executabled named, you
guessed it, `hello`. To run it:

----
jfn@raspberrypi:~$ ./hello
Hello, world!
----

Cool. All is fine. But don't grab a beer just yet. The really fun
parts are yet to start.





=== Emacs mode for Haskell

----
sudo apt-get install haskell-mode
----


Add the following to your `~/.emacs`:

[source,lisp]
----
(custom-set-variables
 '(haskell-mode-hook '(turn-on-haskell-indentation)))
----





== Accessing Raspberry Pi GPIO ports

How do we access GPIO pins from user space applications?

The GPIO ports of the Raspberry Pi 3 are accessible from user
space. This means applications have access to the GPIO pins. Some
details at https://www.kernel.org/doc/Documentation/gpio/sysfs.txt

The GPIO ports are accessible through the sysfs file system. GPIO
Sysfs interface.

Raspberry Pi 3 is based on the
https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/BCM2835-ARM-Peripherals.pdf[Broadcom
BCM2835] board.

Raspberry PI3 GPIO pins are phisically available
(https://www.raspberrypi.org/documentation/usage/gpio-plus-and-raspi2/README.md). Details
on the available PINs at https://pinout.xyz/

As example Bourne shell script follows. It blinks one LED connected to
port 12.

[source,sh]
----
#!/bin/bash

portNumber=12
blinkHalfPeriod=0.5
portBaseDir=/sys/class/gpio/gpio${portNumber}

# Setup port  for output
if [ ! -d ${portBaseDir} ] ; then
    echo ${portNumber} > /sys/class/gpio/export
fi
echo out > ${portBaseDir}/direction

# Blink forever
while true ; do
    echo 1 > ${portBaseDir}/value
    sleep ${blinkHalfPeriod}
    echo 0 > ${portBaseDir}/value
    sleep ${blinkHalfPeriod}
done
----





== Project tree

----
LedBlink
|-- api
|   `-- Gpio.hs
|-- Blink
|   `-- Main.hs
|-- BlinkMany
|   `-- Main.hs
|-- LedBlink.cabal
`-- Setup.hs
----


[source,haskell]
----
import Control.Concurrent
import Control.Monad
import qualified Gpio as Gpio

portNumber = "12"
blinkHalfPeriod = 500000

main :: IO ()
main = do
  putStrLn $ "Using GPIO port " ++ portNumber
  port <- Gpio.outPort portNumber
  forever $ do
    Gpio.turnOn port
    threadDelay blinkHalfPeriod
    Gpio.turnOff port
    threadDelay blinkHalfPeriod
----





== Building with Cabal

Cabal is a system for building and packaging Haskell libraries and
programs.

Useful information on structuring the project directory tree:

*
  http://stackoverflow.com/questions/12305970/how-to-make-a-haskell-cabal-project-with-libraryexecutables-that-still-run-with

*
  http://taylor.fausak.me/2014/03/04/haskeleton-a-haskell-project-skeleton/

.Contents of the `LedBlink.cabal` file.
----
name: LedBlink
version: 0.1.0.0
build-type: Simple

library
  hs-source-dirs: api
  exposed-modules: Gpio
  build-depends: base, directory
  default-language: Haskell2010

executable led
  hs-source-dirs: cli
  main-is: Main.hs
  build-depends: base, directory, LedBlink
  default-language: Haskell2010
----




Haskell build systems:

* https://www.fpcomplete.com/blog/2015/06/why-is-stack-not-cabal

* https://docs.haskellstack.org/en/stable/README/


Issues with permissions of `/sys/class/gpio/gpio*/direction`:

*
  http://stackoverflow.com/questions/25695973/raspberry-pi-gpio-value-file-appears-with-wrong-permissions-momentarily

* https://github.com/raspberrypi/linux/issues/553
