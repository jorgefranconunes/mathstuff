###########################################################################
#
# 
#
###########################################################################

import "CalculatedFrameSequence.tea"





###########################################################################
#
# 
#
###########################################################################

class MovieBuilder (

    _inputFrameList
    _calculatedFrameSequence
)





###########################################################################
#
# @duration - Duration in seconds of movie to be created.
#
###########################################################################

method MovieBuilder constructor ( frameSequence duration fps ) {
    
    define outputFrameCount [* $duration $fps]
    define startTime        [$frameSequence getStartTime]
    define endTime          [$frameSequence getEndTime]
    define deltaTime        [/ [- $endTime $startTime] $outputFrameCount]
    
    if { <= $deltaTime 0 } {
        error "End time too near start time..."
    }
    
    define inputFrameList          [$frameSequence getFrameList]
    define calculatedFrameSequence \
            [new CalculatedFrameSequence $startTime $endTime $deltaTime]

    set! _inputFrameList          [$frameSequence getFrameList]
    set! _calculatedFrameSequence $calculatedFrameSequence
}





###########################################################################
#
# 
#
###########################################################################

method MovieBuilder build ( calculatorFactory ) {
    
    assign-input-frames $_calculatedFrameSequence  $_inputFrameList
    assign-calculators $_calculatedFrameSequence $calculatorFactory
    
    $_calculatedFrameSequence build
}





###########################################################################
#
# Assigns input frames to calculated frames.
#
###########################################################################

define assign-input-frames ( calculatedFrameSequence inputFrameList ) {
    
    my-log "Assining input frames to calculated frames..."
    
    foreach inputFrame $inputFrameList {
        $calculatedFrameSequence assignInputFrame $inputFrame
    }
}





###########################################################################
#
# 
#
###########################################################################

define assign-calculators ( calculatedFrameSequence calculatorFactory ) {
    
    my-log "Assigning calculators to calculated frames..."
    
    define calculatedFrameList [$calculatedFrameSequence getFrameList]
    
    foreach calculatedFrame $calculatedFrameList {
        define calculator [create-calculator $calculatedFrame $calculatedFrameSequence $calculatorFactory]
        
        $calculatedFrame setCalculator $calculator
    }
}





###########################################################################
#
# 
#
###########################################################################

define create-calculator ( calculatedFrame
                           calculatedFrameSequence
                           calculatorFactory ) {
    
    define inputFrameCount [$calculatedFrame getInputFrameCount]
    
    cond {
        == $inputFrameCount 0 } {
        $calculatorFactory createInterpolator \
                $calculatedFrame $calculatedFrameSequence
    } {
        == $inputFrameCount 1 } {
        $calculatorFactory createIdentity $calculatedFrame
    } {
        $calculatorFactory createAverager $calculatedFrame
    }
        
}





###########################################################################
#
# 
#
###########################################################################

