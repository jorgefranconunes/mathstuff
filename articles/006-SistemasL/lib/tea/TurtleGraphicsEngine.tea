###########################################################################
#
# 
#
###########################################################################

import "TurtleGraphicsPath.tea"





###########################################################################
#
# 
#
###########################################################################

class TurtleGraphicsEngine (

    _forwardStepLength
    _leftTurnAngle
    _rightTurnAngle
    _actionMap
)





###########################################################################
#
# Arguments:
#
# actionMap - List where each element is a list with two elements: symbol
# that may appear in a symbol string, action (symbol).
#
###########################################################################

method TurtleGraphicsEngine constructor ( 
    forwardStepLength leftTurnAngle rightTurnAngle actionMap ) {
        
    set! _forwardStepLength $forwardStepLength
    set! _leftTurnAngle     $leftTurnAngle
    set! _rightTurnAngle    $rightTurnAngle
    set! _actionMap         $actionMap
}





###########################################################################
#
# 
#
###########################################################################

method TurtleGraphicsEngine forward ( path ) {
    
    $path forward $_forwardStepLength
}





###########################################################################
#
# 
#
###########################################################################

method TurtleGraphicsEngine turnLeft ( path ) {
    
    $path turn $_leftTurnAngle
}





###########################################################################
#
# 
#
###########################################################################

method TurtleGraphicsEngine turnRight ( path ) {
    
    $path turn $_rightTurnAngle
}





###########################################################################
#
# 
#
###########################################################################

method TurtleGraphicsEngine run ( symbolList ) {
    
    define path [new TurtleGraphicsPath]
    
    define forward   () { $path forward $_forwardStepLength }
    define turnLeft  () { $path turn $_leftTurnAngle }
    define turnRight () { $path turn $_rightTurnAngle }
    define nop       () { } # No operation
    
    map-apply define $_actionMap
    define actionList         [apply list-cat [map get $symbolList]]
    define actionFunctionList [map get $actionList]
    
    map call-function $actionFunctionList
    
    is $path
}


define call-function ( f ) {
    $f
}





###########################################################################
#
# 
#
###########################################################################

