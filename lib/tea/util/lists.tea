###########################################################################
#
# Utility functions for list manipulation.
#
###########################################################################





#########################################################################
#
# 
#
#########################################################################

global list-cat args {
    
    define head  ()
    define tail  $head
    
    foreach aList $args {
        foreach item $aList {
            define newEmpty ()
            set-car! $tail $item
            set-cdr! $tail $newEmpty
            set! tail $newEmpty
        }
    }
    
    is $head
}


#
# This is the recursive version. Prettier, but heavy on the Java
# small stack...
#

# global list-cat args  {
    
#     define l1   [car $args]
#     define rest [cdr $args]
    
#     if { empty? $rest } {
#         is $l1
#     } {
#         cat-two-lists $l1 [apply list-cat $rest]
#     }
# }


# define cat-two-lists ( l1 l2 ) {
    
#     if { empty? $l1 } {
#         is $l2
#     } {
#         define h1 [car $l1]
#         prepend $h1 [cat-two-lists [cdr $l1] $l2]
#     }
# }





#########################################################################
#
# 
#
#########################################################################

global list-invert ( l ) {
    
    if { empty? $l } {
        is ()
    } {
        list-do-invert $l ()
    }
}


define list-do-invert ( l buffer ) {
    
    if { not-empty? $l } {
        list-do-invert [cdr $l] [prepend [car $l] $buffer]
    } {
        is $buffer
    }
}





#########################################################################
#
# 
#
#########################################################################

global list-sort ( l sort-function ) {
    
    [[apply [new TVector] append $l] sort $sort-function] getElements
}





#########################################################################
#
# 
#
#########################################################################

